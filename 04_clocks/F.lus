(*A control device: it receives a signal "set", and returns a Boolean "level"
  that must be true during "delay" cyvles after each reception of "set"*)
node STABLE (set: bool; delay:int) returns (level:bool);
var count: int;
let
	level = (count>0);
	count = if set then delay
			else if false->pre(level) then pre(count)-1
			else 0;
tel


(*freezs the counter whenever the "second" is not there
 *)
node TIME_STABLE1(set, second:bool; delay:int) returns (level:bool);
var count: int;
let
	level = (count>0);
	count = if set then delay
			else if second then
				if false->pre(level) then pre(count)-1
				else 0
			else (0->pre(count));
tel


(*We can reuse the node "STABLE", calling it at a suitable clock, by filtering its input parameters
 *)
node TIME_STABLE(set,second:bool;delay:int) returns (level:bool);
var ck:bool;
let
	level = current(STABLE((set,delay) when ck));
	ck = true -> set or second;
tel


