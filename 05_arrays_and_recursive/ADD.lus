(*describe a binary adder*)
(*working on two 4-bits integers A and B*)

node FIRST_ADD4(a0,a1,a2,a3:bool;b0,b1,b2,b3:bool)
returns (s0,s1,s2,s3:bool;carry:bool);
var c0,c1,c2,c3:bool;
let
	(s0,c0) = ADD1(a0,b0,false);
	(s1,c1) = ADD1(a1,b1,c0);
	(s2,c2) = ADD1(a2,b2,c1);
	(s3,c3) = ADD1(a3,b3,c2);
	carry = c3;
tel

node ADD1(a,b,c_i:bool) returns (s,c_o:bool);
let
	s = a xor b xor c_i;
	c_o = (a and b) or (b and c_i) or (c_i and a);
tel

node ADD4(A,B:bool^4) returns(S:bool^4; carry:bool);
var C: bool^4;
let
	(S[0],C[0]) = ADD1(A[0],B[0],false);
	(S[1..3],C[1..3]) = ADD1(A[1..3],B[1..3],C[0..2]);
	carry = C[3];
tel

node ADD(const n: int; A,B:bool^n)
returns (S:bool^n;carry:bool);
var C:bool^n;
let
	(S[0],C[0]) = ADD1(A[0],B[0],false);
	(S[1..n-1],C[1..n-1]) = ADD1(A[1..n-1],B[1..n-1],C[0..n-2]);
	carry = C[n-1];
tel


const size = 4;
node MAIN_ADD(A,B:bool^size) returns (S:bool^size);
var carry:bool;
let
	(S,carry) = ADD(size,A,B);
tel



